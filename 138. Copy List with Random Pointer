/*
// Definition for a Node.
class Node {
public:
    int val;
    Node* next;
    Node* random;
    
    Node(int _val) {
        val = _val;
        next = NULL;
        random = NULL;
    }
};
*/



class Solution {
public:
    Node* clonelist(Node* head)
    {
        if(head==NULL)
        return NULL;

        Node* ans=new Node(-1);
        Node* res=ans;
        while(head)
        {
            ans->next=new Node(head->val);
            ans=ans->next;
            head=head->next;
        }
        ans =  res;
        res = res->next;
        delete ans;

        return res;
    }
    Node* copyRandomList(Node* head) {
        if(head==NULL)
        return head;

        Node* clone= clonelist(head);
        // while(clone)
        // {
        //     cout<<clone->val<<" ";
        //     clone=clone->next;
        // }
        
        // while(temp)
        // {
        //     cout<<temp->val<<" ";
        //     temp=temp->next;
        // }

        //changing next pointers;
        //Node* temp=head;

        //changing next pointers
        Node* temp=head;
        Node* temp2=clone;

        unordered_map<Node*, Node*> mp;
        while(temp)
        {
            mp[temp]=temp2;
            temp=temp->next;
            temp2=temp2->next;
        }

        temp=head;
        temp2=clone;

        while(temp)
        {
            temp2->random=mp[temp->random];
            temp=temp->next;
            temp2=temp2->next;
        }

        return clone;
    }
};
